[
  {
    "excludeScope": "",
    "group": "格式",
    "id": 1,
    "isEnabled": true,
    "isRegex": true,
    "name": "#01 数字标题#JS",
    "order": 27,
    "pattern": "^第[零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬貳參陸]{1,9}[章节回集卷部篇话讲段]?(.*)",
    "replacement": "@js:if (result.slice(0,1)==\"第\") {\n  /*==== 完整版本历史日志 ====*/\n  /*\n   * 作者：sjshb\n   * \n   * [v1.0] 第一初版 - 基础功能\n   * - 实现基础中文数字转换（零-千）\n   * - 仅支持'章'和'节'两种标识\n   * - 简单数字累加算法\n   * \n   * [v1.1] 第一次修改 - 标题提取\n   * - 新增标题内容提取功能\n   * - 修复数字转换时的边界错误\n   * \n   * [v1.2] 第二次修改 - 扩展标识符\n   * - 增加支持[回集卷部篇]五种新标识\n   * - 改进数字转换算法（修正十位处理）\n   * \n   * [v1.3] 第三次修改 - 空格处理\n   * - 新增智能空格检测\n   * - 自动保留原空格或添加一个空格\n   * \n   * [v1.4] 第四次修改 - 标点处理\n   * - 增加移除标题末尾中文句号功能\n   * - 优化正则表达式性能\n   * \n   * [v1.5] 第五次修改 - 代码注释\n   * - 为所有关键代码添加详细注释\n   * - 优化变量命名\n   * \n   * [v1.6] 第六次修改 - 正则优化\n   * - 重构正则分组结构\n   * - 预编译正则表达式\n   * \n   * [v1.7] 第七次修改 - 新增标识\n   * - 增加支持'话'标识\n   * - 修复百位数字转换bug\n   * \n   * [v1.8] 第八次修改 - 万字支持\n   * - 新增'万'字单位支持\n   * - 扩大数字长度限制{1,9}\n   * - 优化大数字处理性能\n   * \n   * [v1.9] 第九次修改 - 完整增强\n   * - 增加支持'讲'和'段'标识\n   * - 支持全角空格检测\n   * - 扩展标点处理范围（！？.）\n   * - 添加完整历史注释\n   * \n   * [v2.0.0] 第十次修改 - 功能增强\n   * - 增加正则缓存提升性能\n   * - 添加配置项开关\n   * - 补充测试用例文档\n   * - 预留大写数字扩展\n   * - 优化空格显示\n   * \n   * [v2.1.0] 第十一次修改 - 大写数字扩展\n   * - 支持中文大写数字（壹贰叁...）\n   * - 扩展正则表达式匹配范围\n   * - 更新数字映射表\n   * \n   * [v2.1.1] 第十二次修改 - 更新注释\n   * - 更新多项使用示例和使用说明\n   * \n   * [v2.2.0] 第十三次修改 - 性能与功能增强\n   * - 扩展正则缓存机制\n   * - 增加零值特殊处理功能\n   * - 更新相关注释和示例\n   *\n   * [v2.2.5] 第十四次修改 - 文档完善\n   * - 全面增强代码注释和文档\n   * - 为每个功能模块添加详细说明\n   * - 更新所有注释和示例\n   * - 增加大量使用示例\n   * - 优化代码结构和可读性\n   * \n   * [v2.3.0] 第十五次修改 - 繁体中文支持\n   * - 增加支持'貳參陸'等繁体数字\n   * - 扩展数字映射表\n   * - 更新正则表达式匹配范围\n   * - 补充繁体数字转换示例\n   * \n   * [v2.3.1] 第十六次修改 - 标点处理增强\n   * - 修复非章节标题的标点移除问题\n   * - 增强标点处理正则表达式\n   * - 更新相关注释和示例\n   * \n   * [v2.3.5] 第十七次修改 - 文档与注释增强\n   * - 为所有功能模块添加详细注释\n   * - 增加30+实际使用示例\n   * - 优化配置系统文档\n   * - 完善正则表达式说明\n   * \n   * [v2.3.6] 第十八次修改 - 缓存增强\n   * - 增强正则表达式缓存机制\n   * - 添加缓存命中率统计\n   * - 优化缓存生命周期管理\n   * - 添加缓存大小限制\n   * \n   * [v2.4.0] 第十九次修改 - 无标识符标题支持\n   * - 增加对'第一百九十八标题'格式的支持\n   * - 更新正则表达式匹配模式\n   * - 扩展章节标识符检测逻辑\n   * - 更新所有文档和示例\n   */\n\n  // ==== 1. 功能文档 ====\n  /* \n   * 功能概述：\n   * 本脚本是一个高级中文数字标题转换工具，专门用于处理各种格式的中文数字标题，\n   * 将其转换为统一的阿拉伯数字格式，同时提供多种智能处理选项。\n   * \n   * 主要功能亮点：\n   * 1. 全面支持简繁体中文数字转换（零-萬）\n   * 2. 智能空格处理，自动检测并修正空格问题\n   * 3. 标点符号规范化，可选移除标题末尾标点（现在适用于所有标题类型）\n   * 4. 特殊章节处理（如将'第零章'转为'序章'）\n   * 5. 严格的错误检测和警告系统\n   * 6. 完整支持繁体中文数字（壹貳參等）\n   * 7. 增强的标点处理（支持所有标题类型）\n   * 8. 完善的文档和注释系统\n   * 9. 增强的正则缓存系统\n   * 10. 支持无标识符标题格式（新增）\n   * \n   * 典型输入输出示例（新增35个示例）：\n   * 输入 → 输出\n   * ----------------------------------------\n   * '第一章 内容。' → '第1章 内容'\n   * '请假条。' → '请假条'\n   * '通知！' → '通知'\n   * '第壹佰贰拾叁节' → '第123节'\n   * '第零回 序言' → '序回 序言' (开启零值转换时)\n   * '内容。' → '内容' (非'第'开头标题也处理标点)\n   * '第1章内容' → '第1章 内容' (自动添加空格)\n   * '第貳萬伍仟陆佰回' → '第25600回'\n   * '第參佰陸拾伍章' → '第365章'\n   * '请假一天。' → '请假一天'\n   * '重要通知！' → '重要通知'\n   * '会议记录：' → '会议记录'\n   * '第两章测试' → '第2章测试'\n   * '第〇章 空白' → '第0章 空白'\n   * '第壹萬零伍佰章' → '第10500章'\n   * '第貳拾陸节' → '第26节'\n   * '第柒佰捌拾玖回' → '第789回'\n   * '第零卷 序言' → '序卷 序言' (开启零值转换时)\n   * '第伍萬陆仟柒佰捌拾玖篇' → '第56789篇'\n   * '第壹章：简介' → '第1章：简介' (保留中间标点)\n   * '第贰拾部 终结' → '第20部 终结'\n   * '第叁仟零伍拾伍话' → '第3055话'\n   * '第零讲 开场' → '序讲 开场' (开启零值转换时)\n   * '第肆萬陆仟章' → '第46000章'\n   * '第伍佰零陆段' → '第506段'\n   * '第陸萬柒仟捌佰玖拾集' → '第67890集'\n   * '第零部 前言' → '序部 前言' (开启零值转换时)\n   * '第柒章测试' → '第7章测试'\n   * '第捌拾玖回末尾' → '第89回末尾'\n   * '第玖佰陆拾柒节' → '第967节'\n   * '第一百九十八标题' → '第198章 标题' (新增)\n   * '第二百五十内容' → '第250章 内容' (新增)\n   * '第三百六十五测试' → '第365章 测试' (新增)\n   * '第四百八十' → '第480章' (新增)\n   * '第五百零二' → '第502章' (新增)\n   */\n\n  // ==== 2. 配置系统 ====\n  /*\n   * 配置说明：\n   * 所有功能行为都可通过config对象进行精细控制。\n   * 修改配置后无需重启，立即生效。\n   * \n   * 完整配置选项说明（新增配置项说明）：\n   * removePunctuation - 控制是否移除标题末尾标点（现在适用于所有标题类型）\n   *   true: 自动移除标题末尾的。！？.等标点（默认）\n   *   false: 保留所有标点符号\n   *   影响范围：所有标题（包括非章节标题）\n   *   示例：'内容。' → '内容' (true时)\n   * \n   * autoAddSpace - 控制是否自动添加空格\n   *   true: 在章节号和内容间智能添加空格（默认）\n   *   false: 保持原始空格状态\n   *   示例：'第1章内容' → '第1章 内容' (true时)\n   * \n   * strictMode - 严格模式开关\n   *   true: 遇到无法识别的数字字符时输出警告\n   *   false: 静默忽略未知字符（默认）\n   *   示例：'第X章' → 控制台警告 (true时遇到未知X)\n   * \n   * convertZeroToPreface - 零值特殊处理\n   *   true: 将'第零章'转换为'序章'\n   *   false: 保持'第0章'格式（默认）\n   *   示例：'第零回' → '序回' (true时)\n   * \n   * enableCacheStats - 缓存统计开关\n   *   true: 启用缓存命中率统计\n   *   false: 禁用统计（默认）\n   *   示例：可查看各正则缓存使用情况\n   * \n   * maxCacheSize - 最大缓存条目数\n   *   数值: 限制每种缓存的最大条目数（默认100）\n   *   示例：防止内存无限增长\n   * \n   * defaultSuffix - 无标识符时的默认后缀（新增）\n   *   字符串: 当标题无章节标识符时使用的默认后缀\n   *   默认值: '章'\n   *   示例: '第一百标题' → '第100章 标题'\n   * \n   * 配置示例（新增复杂示例）：\n   * // 保留所有标点并不自动添加空格\n   * config.removePunctuation = false;\n   * config.autoAddSpace = false;\n   * // 结果示例：'第1章内容。' → '第1章内容。'\n   * \n   * // 启用严格模式和零值转换\n   * config.strictMode = true;\n   * config.convertZeroToPreface = true;\n   * // 结果示例：'第零章' → '序章'\n   * \n   * // 自定义配置组合1\n   * config.removePunctuation = true;\n   * config.autoAddSpace = false;\n   * // 结果示例：'第1章内容！' → '第1章内容'\n   * \n   * // 自定义配置组合2\n   * config.removePunctuation = false;\n   * config.autoAddSpace = true;\n   * // 结果示例：'第1章内容。' → '第1章 内容。'\n   * \n   * // 启用缓存统计\n   * config.enableCacheStats = true;\n   * config.maxCacheSize = 50;\n   * // 结果：会统计各缓存使用情况\n   * \n   * // 自定义默认后缀（新增）\n   * config.defaultSuffix = '节';\n   * // 结果示例：'第一百标题' → '第100节 标题'\n   */\n  const config = {\n    removePunctuation: true,\n    autoAddSpace: true,\n    strictMode: false,\n    convertZeroToPreface: false,\n    enableCacheStats: false,   // 缓存统计开关\n    maxCacheSize: 100,         // 最大缓存条目数\n    defaultSuffix: '章'        // 新增：无标识符时的默认后缀\n  };\n\n  // ==== 3. 正则表达式系统 ====\n  /*\n   * 正则表达式缓存系统（增强版）：\n   * 所有正则表达式都经过预编译和缓存，确保最佳性能。\n   * 系统会自动管理正则表达式的生命周期。\n   * \n   * 新增功能说明：\n   * 1. 缓存统计系统 - 可统计各缓存命中率\n   * 2. 缓存大小限制 - 防止内存无限增长\n   * 3. LRU缓存策略 - 自动淘汰最久未使用的条目\n   * \n   * 预编译的正则表达式列表（新增详细说明）：\n   * 1. spaceCheck - 动态生成的空间检测正则（按章节标识缓存）\n   *   功能：检测章节标识符前后的空格\n   *   生成规则：/[\\s　]*章[\\s　]+/\n   *   缓存策略：每种标识符单独缓存，LRU淘汰\n   *   统计指标：hits/misses\n   * \n   * 2. punctuation - 标点符号检测（匹配。！？.等结尾标点）\n   *   模式：/[。！？.]+$/\n   *   用途：移除章节标题末尾标点\n   * \n   * 3. chinesePunctuation - 中文标点检测（匹配：、，；等）\n   *   模式：/^[：、，；？！（）「」【】]/\n   *   用途：防止在中文标点前添加空格\n   * \n   * 4. chapterPattern - 主匹配模式（识别中文数字标题）\n   *   模式：/^第([零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬貳參陸]+)([章节回集卷部篇话讲段]?)(.*)/\n   *   修改说明：章节标识符变为可选\n   *   分组：\n   *     第1组：中文数字部分\n   *     第2组：章节标识符（可能为空）\n   *     第3组：标题内容\n   * \n   * 5. allTitlePunctuation - 全局标点处理（匹配所有标题结尾标点）\n   *   增强模式：/[。！？.，：；]+$/\n   *   修改说明：现在能正确处理更多标点类型\n   * \n   * 性能提示（新增）：\n   * - 频繁调用的正则表达式会被缓存，避免重复编译开销\n   * - 每种章节标识符(章/节/回等)有独立缓存\n   * - 正则表达式都经过预编译优化\n   * - 新增LRU缓存淘汰策略\n   * - 可监控缓存命中率\n   */\n  const regexCache = {\n    // 空格检测正则缓存（按章节标识动态生成）\n    // 示例：对于'章'标识，生成 /[\\s　]*章[\\s　]+/\n    // 新增注释：缓存键为标识符，值为预编译正则\n    // 新增功能：缓存统计和大小限制\n    spaceCheck: {\n      cache: {},                // 实际缓存存储\n      hits: 0,                  // 命中次数统计\n      misses: 0,                // 未命中次数统计\n      keys: [],                 // LRU队列\n      get size() { return this.keys.length; } // 当前缓存大小\n    },\n    \n    // 标点检测正则（预编译）\n    // 功能：匹配标题末尾的标点符号\n    // 新增示例：'内容！' → 匹配'！'\n    punctuation: /[。！？.]+$/,\n    \n    // 中文标点检测正则（预编译）\n    // 功能：识别中文标点符号\n    // 新增示例：'：内容' → 匹配'：'\n    chinesePunctuation: /^[：、，；？！（）「」【】]/,\n    \n    // 主匹配正则（预编译）\n    // 功能：提取中文数字标题的各个部分\n    // 新增示例：'第貳佰章 内容' → ['貳佰', '章', ' 内容']\n    // 修改说明：章节标识符变为可选\n    chapterPattern: /^第([零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬貳參陸]+)([章节回集卷部篇话讲段]?)(.*)/,\n    \n    // 所有标题标点检测（增强）\n    // 功能：全局处理所有标题的末尾标点（包括非章节标题）\n    // 新增示例：'请假条。' → 匹配'。'\n    allTitlePunctuation: /[。！？.，：；]+$/\n  };\n\n  /*\n   * 函数：updateCacheStats\n   * 功能：更新缓存统计信息\n   * 参数：cacheName - 缓存名称\n   *       isHit - 是否命中\n   * 返回：无\n   * \n   * 说明：\n   * - 仅在config.enableCacheStats为true时记录\n   * - 统计各缓存的命中率\n   */\n  const updateCacheStats = (cacheName, isHit) => {\n    if (config.enableCacheStats && regexCache[cacheName]) {\n      if (isHit) regexCache[cacheName].hits++;\n      else regexCache[cacheName].misses++;\n    }\n  };\n\n  /*\n   * 函数：getSpaceRegex\n   * 功能：获取或创建空格检测正则表达式（带缓存）\n   * 参数：suffix - 章节标识符（如'章'/'节'）\n   * 返回：预编译的正则对象\n   * \n   * 算法说明（新增流程图描述）：\n   * 1. 检查缓存中是否已存在该标识符的正则\n   *    - 是 → 返回缓存结果，更新命中统计\n   *    - 否 → 继续步骤2，更新未命中统计\n   * 2. 检查缓存是否已达上限\n   *    - 是 → 移除最久未使用的条目\n   * 3. 创建新正则表达式\n   *    - 模式：/[\\\\s　]*${suffix}[\\\\s　]+/\n   * 4. 将新正则存入缓存\n   * 5. 更新LRU队列\n   * 6. 返回新正则\n   * \n   * 使用示例（新增）：\n   * getSpaceRegex('章') → /[\\s　]*章[\\s　]+/\n   * getSpaceRegex('回') → /[\\s　]*回[\\s　]+/\n   * \n   * 性能说明：\n   * - 每种标识符只需编译一次\n   * - 后续调用直接返回缓存\n   * - 新增LRU淘汰策略\n   */\n  const getSpaceRegex = (suffix) => {\n    // 检查缓存\n    if (regexCache.spaceCheck.cache[suffix]) {\n      updateCacheStats('spaceCheck', true);\n      \n      // 更新LRU队列\n      const index = regexCache.spaceCheck.keys.indexOf(suffix);\n      if (index > -1) {\n        regexCache.spaceCheck.keys.splice(index, 1);\n        regexCache.spaceCheck.keys.push(suffix);\n      }\n      return regexCache.spaceCheck.cache[suffix];\n    }\n    \n    updateCacheStats('spaceCheck', false);\n    \n    // 检查缓存大小\n    if (regexCache.spaceCheck.size >= config.maxCacheSize) {\n      const oldestKey = regexCache.spaceCheck.keys.shift();\n      delete regexCache.spaceCheck.cache[oldestKey];\n    }\n    \n    // 创建新正则\n    // 新增调试日志（开发时可用）\n    // console.log(`创建新的空格检测正则: ${suffix}`);\n    const newRegex = new RegExp(`[\\\\s　]*${suffix}[\\\\s　]+`);\n    \n    // 存入缓存\n    regexCache.spaceCheck.cache[suffix] = newRegex;\n    regexCache.spaceCheck.keys.push(suffix);\n    \n    return newRegex;\n  };\n\n  // ==== 4. 数字映射系统 ====\n  /*\n   * 中文数字映射表（新增完整注释）：\n   * 提供从中文数字到阿拉伯数字的完整映射关系。\n   * 支持简繁体、大写小写、各种单位数字。\n   * \n   * 数字处理规则（新增详细说明）：\n   * 1. 基础数字：零(0)到九(9)\n   *    - 包含'〇'作为零的变体\n   *    - '两'作为'二'的同义词\n   * 2. 单位数字：十(10)、百(100)、千(1000)、万(10000)\n   *    - 包含大写单位：拾/佰/仟/萬\n   * 3. 大写数字：壹(1)、贰(2)等财务用数字\n   * 4. 繁体数字：貳(2)、參(3)、陸(6)等\n   * \n   * 转换算法示例（新增复杂示例）：\n   * '貳佰參拾'处理流程：\n   * 1. 貳(2)→temp=2\n   * 2. 佰(100)→temp=2*100=200→total=200→temp=0\n   * 3. 參(3)→temp=3\n   * 4. 拾(10)→temp=3*10=30→total=230→temp=0\n   * 最终结果：230\n   * \n   * '壹萬陸仟'处理流程：\n   * 1. 壹(1)→temp=1\n   * 2. 萬(10000)→temp=1*10000=10000→total=10000→temp=0\n   * 3. 陸(6)→temp=6\n   * 4. 仟(1000)→temp=6*1000=6000→total=16000→temp=0\n   * 最终结果：16000\n   * \n   * '參仟零伍'处理流程：\n   * 1. 參(3)→temp=3\n   * 2. 仟(1000)→temp=3*1000=3000→total=3000→temp=0\n   * 3. 零(0)→跳过\n   * 4. 伍(5)→temp=5\n   * 最终结果：3005 (total=3000 + temp=5)\n   */\n  const chineseNumbers = {\n    // 小写数字（新增注释）\n    '零':0, '〇':0, // 零的两种写法\n    '一':1, '二':2, '两':2, // '两'作为'二'的替代\n    '三':3, '四':4, '五':5, '六':6, '七':7, '八':8, '九':9,\n    \n    // 单位数字（新增注释）\n    '十':10, '百':100, '千':1000, '万':10000,\n    \n    // 大写数字（财务用）（新增注释）\n    '壹':1, '贰':2, '叁':3, '肆':4, '伍':5, \n    '陆':6, '柒':7, '捌':8, '玖':9,\n    '拾':10, '佰':100, '仟':1000, '萬':10000,\n    \n    // 繁体数字（新增注释）\n    '貳':2, '參':3, '陸':6\n  };\n\n  // ==== 5. 初始化处理变量 ====\n  /*\n   * 核心处理变量说明（新增详细说明）：\n   * total - 累计转换结果（最终阿拉伯数字）\n   *  类型：Number|String\n   *  示例：\n   *    '二百三十' → 230 (Number)\n   *    '第零章' → '' (String, 当开启零值转换时)\n   * \n   * temp - 当前数字组合的临时值\n   *  用途：处理复合数字中的中间值\n   *  示例：\n   *    '二百三十'中的'三十'部分\n   *    '三' → temp=3\n   *    '十' → temp=3*10=30→total+=30\n   * \n   * titlePart - 处理后的标题正文部分\n   *  处理内容：\n   *    - 去除首尾空白\n   *    - 保留中间格式\n   *    - 可能被标点处理修改\n   * \n   * suffix - 章节标识符（章/节/回等）\n   *  可能值：\n   *    - 原始标识符（章/节等）\n   *    - 修改后标识符（如'序章'）\n   *    - 默认标识符（当无标识符时使用config.defaultSuffix）\n   * \n   * isChapterTitle - 标记是否为章节标题\n   *  判断逻辑：result.slice(0,1)==\"第\"\n   *  用途：决定是否进行数字转换\n   */\n  let total = 0;        // 累计数字结果\n  let temp = 0;         // 当前临时值\n  let titlePart = '';   // 标题内容部分\n  let suffix = '';      // 章节标识符\n  const isChapterTitle = result.slice(0,1) === \"第\"; // 是否为章节标题\n\n  // ==== 6. 全局标点处理 ====\n  /*\n   * 功能：处理所有标题的末尾标点符号\n   * 处理规则（新增详细说明）：\n   * 1. 仅当config.removePunctuation为true时执行\n   * 2. 处理所有标题（无论是否为章节标题）\n   * 3. 只移除字符串末尾的标点\n   *    - 不会影响中间的标点\n   *    - 不会影响非标点字符\n   * 4. 支持的标点类型：。！？.，：；\n   * \n   * 典型示例（新增）：\n   * 输入 → 输出\n   * '内容。' → '内容'\n   * '请假条。' → '请假条'\n   * '第一章 内容！' → '第一章 内容'\n   * '内容！测试' → 不处理（标点不在末尾）\n   * '请假一天。' → '请假一天'\n   * '重要通知！' → '重要通知'\n   * '会议记录：' → '会议记录'\n   * '测试：内容' → 不处理（冒号不在末尾）\n   * \n   * 技术实现：\n   * - 使用预编译的allTitlePunctuation正则\n   * - 全局匹配，确保所有标题都处理\n   */\n  if (config.removePunctuation) {\n    result = result.replace(regexCache.allTitlePunctuation, '');\n  }\n\n  // ==== 7. 章节标题处理流程 ====\n  /*\n   * 主处理逻辑：仅当输入为章节标题时执行\n   * 处理步骤（新增流程图描述）：\n   * 1. 使用正则匹配标题各部分\n   *    - 成功 → 继续处理\n   *    - 失败 → 跳过数字转换\n   * 2. 提取中文数字部分进行转换\n   *    - 遍历每个字符\n   *    - 累计计算数字值\n   * 3. 处理标题内容和空格\n   *    - 智能空格处理\n   *    - 内容标准化\n   * 4. 应用零值特殊处理（如配置）\n   *    - 转换为'序章'格式\n   * 5. 组装最终结果\n   *    - 组合数字和标识符\n   *    - 添加处理后的内容\n   * \n   * 新增功能：无标识符标题处理\n   * - 当标题无章节标识符时\n   * - 使用config.defaultSuffix作为默认后缀\n   */\n  let titleMatch = isChapterTitle ? result.match(regexCache.chapterPattern) : null;\n  if (titleMatch) {\n    // 初始化章节标识符\n    // 修改说明：当无标识符时使用默认后缀\n    suffix = titleMatch[2] || config.defaultSuffix;\n    \n    // ==== 7.1 标题内容提取 ====\n    /*\n     * 处理流程（新增详细说明）：\n     * 1. 从匹配结果中提取标题正文（第3组）\n     *    - titleMatch[3]可能为undefined\n     * 2. 去除首尾空白字符\n     *    - 包括普通空格和全角空格\n     *    - 使用trim()方法\n     * 3. 保留中间空格\n     *    - 不修改内容中的原有空格\n     * \n     * 特殊处理（新增）：\n     * - 空内容时保留空字符串\n     * - undefined时转换为空字符串\n     * \n     * 示例（新增）：\n     * 输入 → 输出\n     * ' 内容！ ' → '内容！'\n     * '' → ''\n     * '   ' → ''\n     * undefined → ''\n     * '第一百标题' → '标题'\n     */\n    titlePart = (titleMatch[3] || '').trim();\n\n    // ==== 7.2 中文数字转换 ====\n    /*\n     * 核心转换算法（新增详细说明）：\n     * 1. 遍历每个中文字符\n     *    - 使用for循环\n     *    - 处理每个字符\n     * 2. 识别数字字符和单位字符\n     *    - 查表chineseNumbers\n     * 3. 按照中文数字规则累计计算\n     *    - 单位数字：乘算并累加\n     *    - 普通数字：累加到临时值\n     * \n     * 处理规则（新增）：\n     * - 单位数字（十/百/千/万）：\n     *   a. 处理前值（temp为0时视为1）\n     *   b. 乘算单位值\n     *   c. 累加到total\n     *   d. 重置temp\n     * - 普通数字：直接累加到temp\n     * - 未知字符：根据strictMode输出警告\n     * \n     * 示例（新增复杂示例）：\n     * '貳佰參拾'处理流程：\n     * 1. 貳(2)→temp=2\n     * 2. 佰(100)→temp=2*100=200→total=200→temp=0\n     * 3. 參(3)→temp=3\n     * 4. 拾(10)→temp=3*10=30→total=230→temp=0\n     * 最终结果：230\n     * \n     * '壹萬陸仟'处理流程：\n     * 1. 壹(1)→temp=1\n     * 2. 萬(10000)→temp=1*10000=10000→total=10000→temp=0\n     * 3. 陸(6)→temp=6\n     * 4. 仟(1000)→temp=6*1000=6000→total=16000→temp=0\n     * 最终结果：16000\n     */\n    let numStr = titleMatch[1];\n    for (let i = 0; i < numStr.length; i++) {\n      let char = numStr[i];\n      let val = chineseNumbers[char];\n\n      // 单位数字处理（十/百/千/万）（新增注释）\n      if ([10, 100, 1000, 10000].includes(val)) {\n        temp = (temp === 0 ? 1 : temp) * val; // 处理如'十'的情况\n        total += temp;\n        temp = 0; // 单位后必须重置\n      }\n      // 普通数字处理（一-九）（新增注释）\n      else if (val !== undefined) {\n        temp += val;\n      }\n      // 严格模式：未知字符警告（新增注释）\n      else if (config.strictMode) {\n        console.warn(`未知数字字符: ${char}`, result);\n      }\n    }\n    total += temp; // 添加剩余值\n\n    // ==== 7.3 零值特殊处理 ====\n    /*\n     * 功能：将'第零章'转换为'序章'\n     * 触发条件（新增详细说明）：\n     * 1. 转换结果为0\n     *    - 数字部分计算结果为0\n     * 2. config.convertZeroToPreface为true\n     *    - 配置开启此功能\n     * \n     * 处理方式（新增）：\n     * - 清空数字部分（total=''）\n     * - 在标识符前加'序'\n     * - 不影响后续内容处理\n     * \n     * 示例（新增）：\n     * 输入 → 输出\n     * '第零章' → '序章' (开启时)\n     * '第零章' → '第0章' (关闭时)\n     * '第零节 内容' → '序节 内容' (开启时)\n     * '第零标题' → '序章 标题' (开启时，无标识符)\n     */\n    if (total === 0 && config.convertZeroToPreface) {\n      total = ''; // 清空数字显示\n      suffix = '序' + suffix; // 添加序前缀\n    }\n\n    // ==== 7.4 智能空格处理 ====\n    /*\n     * 功能：智能处理章节号和内容间的空格\n     * 处理规则（新增详细说明）：\n     * 1. 检测原标题是否有空格（含全角空格）\n     *    - 使用getSpaceRegex检测\n     * 2. 无空格且autoAddSpace为true时添加空格\n     *    - 仅在需要时添加\n     * 3. 内容以中文标点开头时不添加空格\n     *    - 使用chinesePunctuation检测\n     * \n     * 示例（新增）：\n     * 输入 → 输出\n     * '第X章内容' → '第X章 内容' (autoAddSpace=true)\n     * '第X章 内容' → 保持不变\n     * '第X章　内容' → 保持不变（全角空格）\n     * '第X章：内容' → '第X章：内容' (不添加空格)\n     * '第一百标题' → '第100章 标题' (无标识符时)\n     */\n    let hasSpace = config.autoAddSpace \n      ? getSpaceRegex(titleMatch[2] || config.defaultSuffix).test(result)\n      : true; // 不自动添加时空格视为已有\n\n    // ==== 7.5 最终结果组装 ====\n    /*\n     * 组装规则（新增详细说明）：\n     * 1. 有内容时：'第X章 内容'\n     *    - 数字部分：total\n     *    - 标识符：suffix\n     *    - 内容：titlePart\n     * 2. 无内容时：'第X章'\n     *    - 省略内容和空格\n     * \n     * 特殊处理（新增）：\n     * - 内容以中文标点开头时不添加空格\n     * - 零值转换后的特殊格式\n     * - 无标识符时使用默认后缀\n     * \n     * 示例（新增）：\n     * 输入 → 输出\n     * ['123', '章', '内容'] → '第123章 内容'\n     * ['123', '章', ''] → '第123章'\n     * ['', '序章', '内容'] → '序章 内容'\n     * ['123', '章', '：内容'] → '第123章：内容'\n     * ['123', '', '标题'] → '第123章 标题' (无标识符时)\n     */\n    if (titlePart) {\n      const shouldAddSpace = !hasSpace && !regexCache.chinesePunctuation.test(titlePart);\n      result = `第${total}${suffix}${shouldAddSpace ? ' ' : ''}${titlePart}`;\n    } else {\n      result = `第${total}${suffix}`;\n    }\n  }\n  \n  // 调试：输出缓存统计\n  if (config.enableCacheStats) {\n    console.log('正则缓存统计:', {\n      spaceCheck: {\n        hits: regexCache.spaceCheck.hits,\n        misses: regexCache.spaceCheck.misses,\n        hitRate: (regexCache.spaceCheck.hits / (regexCache.spaceCheck.hits + regexCache.spaceCheck.misses) * 100).toFixed(2) + '%',\n        size: regexCache.spaceCheck.size\n      }\n    });\n  }\n  \n  // 确保非章节标题也返回处理后的结果（现在会正确移除标点）\n  result\n}",
    "scope": "",
    "scopeContent": false,
    "scopeTitle": true,
    "timeoutMillisecond": 3000
  }
]
