[
  {
    "excludeScope": "",
    "group": "格式",
    "id": 1,
    "isEnabled": true,
    "isRegex": true,
    "name": "#01 数字标题#JS",
    "order": 27,
    "pattern": "^第[零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬]{1,9}[章节回集卷部篇话讲段](.*)",
    "replacement": "@js:if (result.slice(0,1)==\"第\") {\n  /*==== 完整版本历史日志 ====*/\n  /*\n   * 作者：sjshb\n   * [v1.0] 第一初版 - 基础功能\n   * - 实现基础中文数字转换（零-千）\n   * - 仅支持'章'和'节'两种标识\n   * - 简单数字累加算法\n   * \n   * [v1.1] 第一次修改 - 标题提取\n   * - 新增标题内容提取功能\n   * - 修复数字转换时的边界错误\n   * \n   * [v1.2] 第二次修改 - 扩展标识符\n   * - 增加支持[回集卷部篇]五种新标识\n   * - 改进数字转换算法（修正十位处理）\n   * \n   * [v1.3] 第三次修改 - 空格处理\n   * - 新增智能空格检测\n   * - 自动保留原空格或添加一个空格\n   * \n   * [v1.4] 第四次修改 - 标点处理\n   * - 增加移除标题末尾中文句号功能\n   * - 优化正则表达式性能\n   * \n   * [v1.5] 第五次修改 - 代码注释\n   * - 为所有关键代码添加详细注释\n   * - 优化变量命名\n   * \n   * [v1.6] 第六次修改 - 正则优化\n   * - 重构正则分组结构\n   * - 预编译正则表达式\n   * \n   * [v1.7] 第七次修改 - 新增标识\n   * - 增加支持'话'标识\n   * - 修复百位数字转换bug\n   * \n   * [v1.8] 第八次修改 - 万字支持\n   * - 新增'万'字单位支持\n   * - 扩大数字长度限制{1,9}\n   * - 优化大数字处理性能\n   * \n   * [v1.9] 第九次修改 - 完整增强\n   * - 增加支持'讲'和'段'标识\n   * - 支持全角空格检测\n   * - 扩展标点处理范围（！？.）\n   * - 添加完整历史注释\n   * \n   * [v2.0.0] 功能增强\n   * - 增加正则缓存提升性能\n   * - 添加配置项开关\n   * - 补充测试用例文档\n   * - 预留大写数字扩展\n   * - 优化空格显示\n   * \n   * [v2.1.0] 大写数字扩展\n   * - 支持中文大写数字（壹贰叁...）\n   * - 扩展正则表达式匹配范围\n   * - 更新数字映射表\n   */\n\n  // ==== 1. 配置项 ====\n  /* 新增功能：可通过修改以下配置调整功能行为\n   * removePunctuation: 是否移除末尾标点（默认true）\n   * autoAddSpace: 是否自动添加空格（默认true）\n   * strictMode: 是否严格模式（默认false）\n   * 注意：修改配置后需清除正则缓存 */\n  const config = {\n    removePunctuation: true,\n    autoAddSpace: true,\n    strictMode: false\n  };\n\n  // ==== 2. 正则预编译 ====\n  /* 功能：精确匹配中文数字标题（支持简繁大写）\n   * 修改点：\n   *   - 增加大写数字字符：壹贰叁肆伍陆柒捌玖拾佰仟萬\n   * 分组说明：\n   *   第1组 ([零-萬]+) - 捕获中文数字部分\n   *   第2组 ([章节回集卷部篇话讲段]) - 捕获章节标识\n   *   第3组 (.*) - 捕获剩余标题内容\n   * 特殊说明：\n   *   - '两'和'二'和'贰'都视为2\n   *   - '零'和'〇'都视为0\n   *   - 单位数字处理顺序：十/拾 < 百/佰 < 千/仟 < 万/萬\n   * 优化点：正则缓存机制 */\n  const regexCache = {};\n  const getSpaceRegex = (suffix) => {\n    if (!regexCache[suffix]) {\n      regexCache[suffix] = new RegExp(`[\\\\s　]*${suffix}[\\\\s　]+`);\n    }\n    return regexCache[suffix];\n  };\n\n  const chapterPattern = /^第([零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬]+)([章节回集卷部篇话讲段])(.*)/;\n\n  // ==== 3. 中文数字映射表 ====\n  /* 数字映射规则（完整版）：\n   * 基础数字：\n   *   小写：零(0), 〇(0), 一(1), 二(2), 两(2),...,九(9)\n   *   大写：壹(1), 贰(2), 叁(3),...,玖(9)\n   * 单位数字：\n   *   小写：十(10), 百(100), 千(1000), 万(10000)\n   *   大写：拾(10), 佰(100), 仟(1000), 萬(10000)\n   * 注意事项：\n   *   - 单位数字必须按数值升序排列\n   *   - 大写'萬'必须放在单位数字最后\n   * 示例：\n   *   '贰佰叁拾' → 230\n   *   '壹萬贰仟' → 12000 */\n  const chineseNumbers = {\n    // 小写数字\n    '零':0, '〇':0, '一':1, '二':2, '两':2, '三':3, '四':4, '五':5,\n    '六':6, '七':7, '八':8, '九':9, '十':10, '百':100, '千':1000, '万':10000,\n    // 大写数字\n    '壹':1, '贰':2, '叁':3, '肆':4, '伍':5, '陆':6, '柒':7, '捌':8, '玖':9,\n    '拾':10, '佰':100, '仟':1000, '萬':10000\n  };\n\n  // ==== 4. 变量初始化 ====\n  /* total: 最终累加结果（如：二百三十→230）\n   * temp: 当前数字组合的临时值\n   * titlePart: 处理后的标题正文\n   * 初始化要求：\n   *   - 每次处理前必须重置为0/空 */\n  let total = 0;\n  let temp = 0;\n  let titlePart = '';\n\n  // ==== 5. 正则匹配 ====\n  /* 执行流程：\n   * 1. 尝试匹配标题格式\n   * 2. 失败则直接返回原内容\n   * 3. 成功则提取三个分组\n   * 新增匹配示例：\n   *   '第贰佰叁拾伍章 内容' → \n   *     ['贰佰叁拾伍', '章', ' 内容'] */\n  let titleMatch = result.match(chapterPattern);\n  if (titleMatch) {\n    // ==== 5.1 标题预处理 ====\n    /* 处理步骤：\n     * 1. 提取第3组（标题正文）\n     * 2. 去除首尾空白字符\n     * 3. 保留中间空格\n     * 特殊处理：\n     *   - 空内容时保留空字符串 */\n    titlePart = (titleMatch[3] || '').trim();\n\n    // ==== 5.2 中文数字转换 ====\n    /* 核心算法说明（支持大写数字）：\n     * 1. 遍历每个中文数字字符\n     * 2. 遇到单位数字（十/拾、百/佰、千/仟、万/萬）：\n     *   a. 将当前temp乘以单位值\n     *   b. 累加到total\n     *   c. 重置temp\n     * 3. 遇到普通数字（1-9）：\n     *   a. 累加到temp\n     * 4. 最后将剩余temp加到total\n     * 新增测试用例：\n     *   '贰佰叁拾' → 2×100 + 3×10 = 230\n     *   '壹萬贰仟' → 1×10000 + 2×1000 = 12000\n     *   '叁仟零伍' → 3005\n     *   '零' → 0 */\n    let numStr = titleMatch[1];\n    for (let i = 0; i < numStr.length; i++) {\n      let char = numStr[i];\n      let val = chineseNumbers[char];\n\n      // -- 单位数字处理 --\n      if ([10, 100, 1000, 10000].includes(val)) {\n        temp = (temp === 0 ? 1 : temp) * val; // 处理零值情况\n        total += temp;\n        temp = 0; // 必须重置临时值\n      }\n      // -- 普通数字处理 --\n      else if (val !== undefined) {\n        temp += val;\n      }\n      // -- 严格模式检查 --\n      else if (config.strictMode) {\n        console.warn(`未知数字字符: ${char}`, result);\n      }\n    }\n    total += temp; // 最终累加\n\n    // ==== 5.3 标点处理 ====\n    /* 处理规则：\n     * - 移除标题末尾的以下标点：。！？.\n     * - 仅处理字符串末尾的标点\n     * - 中间标点保留不变\n     * 配置开关：config.removePunctuation\n     * 新增示例：\n     *   '内容！' → '内容' (当开启时)\n     *   '内容！' → '内容！' (当关闭时) */\n    if (config.removePunctuation) {\n      titlePart = titlePart.replace(/[。！？.]+$/, '');\n    }\n\n    // ==== 5.4 空格检查 ====\n    /* 智能空格处理逻辑：\n     * 1. 检查原标题中章节标识后是否有空格（含全角空格）\n     * 2. 无空格时自动添加一个空格\n     * 正则说明：\n     *   [\\\\s　]* 匹配0个或多个空格（含全角）\n     *   ${suffix}[\\\\s　]+ 匹配标识符后的空格\n     * 配置开关：config.autoAddSpace\n     * 新增示例：\n     *   '第X章内容' → 添加空格 (当开启时)\n     *   '第X章 内容' → 保留原空格 */\n    const suffix = titleMatch[2];\n    let hasSpace = config.autoAddSpace \n      ? getSpaceRegex(suffix).test(result)\n      : true; // 不自动添加时空格视为已有\n\n    // ==== 5.5 结果组装 ====\n    /* 修改点：当正文以中文标点开头时不添加空格\n     * 匹配中文标点：：、，；？！（）「」【】\n     * 新增示例：\n     *   '第1节：内容' → 不加空格\n     *   '第1节 内容' → 保留原空格\n     *   '第壹章内容' → '第1章 内容' */\n    if (titlePart) {\n      const shouldAddSpace = !hasSpace && !/^[：、，；？！（）「」【】]/.test(titlePart);\n      result = `第${total}${suffix}${shouldAddSpace ? ' ' : ''}${titlePart}`;\n    } else {\n      result = `第${total}${suffix}`;\n    }\n  }\n}\n// 非'第'开头内容返回空字符串（保持历史一致性）\nelse \"\"",
    "scope": "",
    "scopeContent": false,
    "scopeTitle": true,
    "timeoutMillisecond": 3000
  }
]
