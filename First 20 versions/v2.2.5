[
  {
    "excludeScope": "",
    "group": "格式",
    "id": 1,
    "isEnabled": true,
    "isRegex": true,
    "name": "#01 数字标题#JS",
    "order": 27,
    "pattern": "^第[零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬]{1,9}[章节回集卷部篇话讲段](.*)",
    "replacement": "@js:if (result.slice(0,1)==\"第\") {\n  /*==== 完整版本历史日志 ====*/\n  /*\n   * 作者：sjshb\n   * \n   * [v1.0] 第一初版 - 基础功能\n   * - 实现基础中文数字转换（零-千）\n   * - 仅支持'章'和'节'两种标识\n   * - 简单数字累加算法\n   * \n   * [v1.1] 第一次修改 - 标题提取\n   * - 新增标题内容提取功能\n   * - 修复数字转换时的边界错误\n   * \n   * [v1.2] 第二次修改 - 扩展标识符\n   * - 增加支持[回集卷部篇]五种新标识\n   * - 改进数字转换算法（修正十位处理）\n   * \n   * [v1.3] 第三次修改 - 空格处理\n   * - 新增智能空格检测\n   * - 自动保留原空格或添加一个空格\n   * \n   * [v1.4] 第四次修改 - 标点处理\n   * - 增加移除标题末尾中文句号功能\n   * - 优化正则表达式性能\n   * \n   * [v1.5] 第五次修改 - 代码注释\n   * - 为所有关键代码添加详细注释\n   * - 优化变量命名\n   * \n   * [v1.6] 第六次修改 - 正则优化\n   * - 重构正则分组结构\n   * - 预编译正则表达式\n   * \n   * [v1.7] 第七次修改 - 新增标识\n   * - 增加支持'话'标识\n   * - 修复百位数字转换bug\n   * \n   * [v1.8] 第八次修改 - 万字支持\n   * - 新增'万'字单位支持\n   * - 扩大数字长度限制{1,9}\n   * - 优化大数字处理性能\n   * \n   * [v1.9] 第九次修改 - 完整增强\n   * - 增加支持'讲'和'段'标识\n   * - 支持全角空格检测\n   * - 扩展标点处理范围（！？.）\n   * - 添加完整历史注释\n   * \n   * [v2.0.0] 第十次修改 - 功能增强\n   * - 增加正则缓存提升性能\n   * - 添加配置项开关\n   * - 补充测试用例文档\n   * - 预留大写数字扩展\n   * - 优化空格显示\n   * \n   * [v2.1.0] 第十一次修改 - 大写数字扩展\n   * - 支持中文大写数字（壹贰叁...）\n   * - 扩展正则表达式匹配范围\n   * - 更新数字映射表\n   * \n   * [v2.1.1] 第十二次修改 - 更新注释\n   * - 更新多项使用示例和使用说明\n   * \n   * [v2.2.0] 第十三次修改 - 性能与功能增强\n   * - 扩展正则缓存机制\n   * - 增加零值特殊处理功能\n   * - 更新相关注释和示例\n   *\n   * [v2.2.5] 当前版本 - 文档完善\n   * - 全面增强代码注释和文档\n   * - 为每个功能模块添加详细说明\n   * - 更新所有注释和示例\n   * - 增加大量使用示例\n   * - 优化代码结构和可读性\n   */\n\n  // ==== 1. 功能文档 ====\n  /* \n   * 功能概述：\n   * 本脚本是一个高级中文数字标题转换工具，专门用于处理各种格式的中文数字标题，\n   * 将其转换为统一的阿拉伯数字格式，同时提供多种智能处理选项。\n   * \n   * 主要功能亮点：\n   * 1. 全面支持简繁体中文数字转换（零-萬）\n   * 2. 智能空格处理，自动检测并修正空格问题\n   * 3. 标点符号规范化，可选移除标题末尾标点\n   * 4. 特殊章节处理（如将'第零章'转为'序章'）\n   * 5. 严格的错误检测和警告系统\n   * \n   * 典型输入输出示例：\n   * 输入 → 输出\n   * ----------------------------------------\n   * '第一章 内容。' → '第1章 内容'\n   * '第壹佰贰拾叁节' → '第123节'\n   * '第零回 序言' → '序回 序言' (开启零值转换时)\n   * '内容。' → '内容' (非'第'开头标题也处理标点)\n   * '第1章内容' → '第1章 内容' (自动添加空格)\n   * '第贰萬伍仟陆佰回' → '第25600回'\n   * \n   * 适用场景：\n   * - 小说章节标题规范化\n   * - 法律条文编号转换\n   * - 学术文档章节整理\n   * - 任何需要中文数字转换的场景\n   */\n\n  // ==== 2. 配置系统 ====\n  /*\n   * 配置说明：\n   * 所有功能行为都可通过config对象进行精细控制。\n   * 修改配置后无需重启，立即生效。\n   * \n   * 完整配置选项说明：\n   * removePunctuation - 控制是否移除标题末尾标点\n   *   true: 自动移除标题末尾的。！？.等标点（默认）\n   *   false: 保留所有标点符号\n   * \n   * autoAddSpace - 控制是否自动添加空格\n   *   true: 在章节号和内容间智能添加空格（默认）\n   *   false: 保持原始空格状态\n   * \n   * strictMode - 严格模式开关\n   *   true: 遇到无法识别的数字字符时输出警告\n   *   false: 静默忽略未知字符（默认）\n   * \n   * convertZeroToPreface - 零值特殊处理\n   *   true: 将'第零章'转换为'序章'\n   *   false: 保持'第0章'格式（默认）\n   * \n   * 配置示例：\n   * // 保留所有标点并不自动添加空格\n   * config.removePunctuation = false;\n   * config.autoAddSpace = false;\n   * \n   * // 启用严格模式和零值转换\n   * config.strictMode = true;\n   * config.convertZeroToPreface = true;\n   */\n  const config = {\n    removePunctuation: true,\n    autoAddSpace: true,\n    strictMode: false,\n    convertZeroToPreface: false\n  };\n\n  // ==== 3. 正则表达式系统 ====\n  /*\n   * 正则表达式缓存系统：\n   * 所有正则表达式都经过预编译和缓存，确保最佳性能。\n   * 系统会自动管理正则表达式的生命周期。\n   * \n   * 预编译的正则表达式列表：\n   * 1. spaceCheck - 动态生成的空间检测正则（按章节标识缓存）\n   * 2. punctuation - 标点符号检测（匹配。！？.等结尾标点）\n   * 3. chinesePunctuation - 中文标点检测（匹配：、，；等）\n   * 4. chapterPattern - 主匹配模式（识别中文数字标题）\n   * 5. allTitlePunctuation - 全局标点处理（匹配所有标题结尾标点）\n   * \n   * 性能提示：\n   * 频繁调用的正则表达式会被缓存，避免重复编译开销。\n   */\n  const regexCache = {\n    // 空格检测正则缓存（按章节标识动态生成）\n    // 示例：对于'章'标识，生成 /[\\s　]*章[\\s　]+/\n    spaceCheck: {},\n    \n    // 标点检测正则（预编译）\n    // 功能：匹配标题末尾的标点符号\n    // 示例：'内容！' → 匹配'！'\n    punctuation: /[。！？.]+$/,\n    \n    // 中文标点检测正则（预编译）\n    // 功能：识别中文标点符号\n    // 示例：'：内容' → 匹配'：'\n    chinesePunctuation: /^[：、，；？！（）「」【】]/,\n    \n    // 主匹配正则（预编译）\n    // 功能：提取中文数字标题的各个部分\n    // 示例：'第贰佰章 内容' → ['贰佰', '章', ' 内容']\n    chapterPattern: /^第([零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬]+)([章节回集卷部篇话讲段])(.*)/,\n    \n    // 所有标题标点检测（新增）\n    // 功能：全局处理所有标题的末尾标点\n    // 示例：'附录A。' → 匹配'。'\n    allTitlePunctuation: /[。！？.]+$/\n  };\n\n  /*\n   * 函数：getSpaceRegex\n   * 功能：获取或创建空格检测正则表达式（带缓存）\n   * 参数：suffix - 章节标识符（如'章'/'节'）\n   * 返回：预编译的正则对象\n   * \n   * 算法说明：\n   * 1. 检查缓存中是否已存在该标识符的正则\n   * 2. 存在则直接返回缓存结果\n   * 3. 不存在则创建新正则并缓存\n   * \n   * 使用示例：\n   * getSpaceRegex('章') → /[\\s　]*章[\\s　]+/\n   * getSpaceRegex('回') → /[\\s　]*回[\\s　]+/\n   */\n  const getSpaceRegex = (suffix) => {\n    if (!regexCache.spaceCheck[suffix]) {\n      regexCache.spaceCheck[suffix] = new RegExp(`[\\\\s　]*${suffix}[\\\\s　]+`);\n    }\n    return regexCache.spaceCheck[suffix];\n  };\n\n  // ==== 4. 数字映射系统 ====\n  /*\n   * 中文数字映射表：\n   * 提供从中文数字到阿拉伯数字的完整映射关系。\n   * 支持简繁体、大写小写、各种单位数字。\n   * \n   * 数字处理规则：\n   * 1. 基础数字：零(0)到九(9)\n   * 2. 单位数字：十(10)、百(100)、千(1000)、万(10000)\n   * 3. 特殊数字：'两'作为'二'的同义词\n   * 4. 大写数字：壹(1)、贰(2)等财务用数字\n   * \n   * 转换示例：\n   * '贰佰叁拾' → 2×100 + 3×10 = 230\n   * '壹萬贰仟' → 1×10000 + 2×1000 = 12000\n   * '叁仟零伍' → 3000 + 5 = 3005\n   */\n  const chineseNumbers = {\n    // 小写数字\n    '零':0, '〇':0, // 零的两种写法\n    '一':1, '二':2, '两':2, // '两'作为'二'的替代\n    '三':3, '四':4, '五':5, '六':6, '七':7, '八':8, '九':9,\n    \n    // 单位数字\n    '十':10, '百':100, '千':1000, '万':10000,\n    \n    // 大写数字（财务用）\n    '壹':1, '贰':2, '叁':3, '肆':4, '伍':5, \n    '陆':6, '柒':7, '捌':8, '玖':9,\n    '拾':10, '佰':100, '仟':1000, '萬':10000\n  };\n\n  // ==== 5. 初始化处理变量 ====\n  /*\n   * 核心处理变量说明：\n   * total - 累计转换结果（最终阿拉伯数字）\n   *  示例：'二百三十' → 230\n   * \n   * temp - 当前数字组合的临时值\n   *  用于处理'二百三十'中的'三十'部分\n   * \n   * titlePart - 处理后的标题正文部分\n   *  保留原始内容但经过标准化处理\n   * \n   * suffix - 章节标识符（章/节/回等）\n   *  可能被零值处理修改（如'序章'）\n   * \n   * isChapterTitle - 标记是否为章节标题\n   *  用于决定是否进行数字转换\n   */\n  let total = 0;        // 累计数字结果\n  let temp = 0;         // 当前临时值\n  let titlePart = '';   // 标题内容部分\n  let suffix = '';      // 章节标识符\n  const isChapterTitle = result.slice(0,1) === \"第\"; // 是否为章节标题\n\n  // ==== 6. 全局标点处理 ====\n  /*\n   * 功能：处理所有标题的末尾标点符号\n   * 处理规则：\n   * 1. 仅当config.removePunctuation为true时执行\n   * 2. 只移除字符串末尾的标点\n   * 3. 中间标点保持不变\n   * \n   * 典型示例：\n   * 输入 → 输出\n   * '内容。' → '内容'\n   * '第一章 内容！' → '第一章 内容'\n   * '内容！测试' → 不处理（标点不在末尾）\n   * \n   * 技术实现：\n   * 使用预编译的allTitlePunctuation正则进行替换\n   */\n  if (config.removePunctuation) {\n    result = result.replace(regexCache.allTitlePunctuation, '');\n  }\n\n  // ==== 7. 章节标题处理流程 ====\n  /*\n   * 主处理逻辑：仅当输入为章节标题时执行\n   * 处理步骤：\n   * 1. 使用正则匹配标题各部分\n   * 2. 提取中文数字部分进行转换\n   * 3. 处理标题内容和空格\n   * 4. 应用零值特殊处理（如配置）\n   * 5. 组装最终结果\n   */\n  let titleMatch = isChapterTitle ? result.match(regexCache.chapterPattern) : null;\n  if (titleMatch) {\n    // 初始化章节标识符\n    suffix = titleMatch[2];\n    \n    // ==== 7.1 标题内容提取 ====\n    /*\n     * 处理流程：\n     * 1. 从匹配结果中提取标题正文（第3组）\n     * 2. 去除首尾空白字符\n     * 3. 保留中间空格\n     * \n     * 特殊处理：\n     * - 空内容时保留空字符串\n     * \n     * 示例：\n     * 输入 → 输出\n     * ' 内容！ ' → '内容！'\n     * '' → ''\n     * '   ' → ''\n     */\n    titlePart = (titleMatch[3] || '').trim();\n\n    // ==== 7.2 中文数字转换 ====\n    /*\n     * 核心转换算法：\n     * 1. 遍历每个中文字符\n     * 2. 识别数字字符和单位字符\n     * 3. 按照中文数字规则累计计算\n     * \n     * 处理规则：\n     * - 单位数字（十/百/千/万）：累加当前值并重置临时值\n     * - 普通数字：累加到临时值\n     * - 未知字符：根据strictMode输出警告\n     * \n     * 示例：\n     * '贰佰叁拾'处理流程：\n     * 1. 贰(2)→temp=2\n     * 2. 佰(100)→temp=2*100=200→total=200→temp=0\n     * 3. 叁(3)→temp=3\n     * 4. 拾(10)→temp=3*10=30→total=230→temp=0\n     * 最终结果：230\n     */\n    let numStr = titleMatch[1];\n    for (let i = 0; i < numStr.length; i++) {\n      let char = numStr[i];\n      let val = chineseNumbers[char];\n\n      // 单位数字处理（十/百/千/万）\n      if ([10, 100, 1000, 10000].includes(val)) {\n        temp = (temp === 0 ? 1 : temp) * val; // 处理如'十'的情况\n        total += temp;\n        temp = 0; // 单位后必须重置\n      }\n      // 普通数字处理（一-九）\n      else if (val !== undefined) {\n        temp += val;\n      }\n      // 严格模式：未知字符警告\n      else if (config.strictMode) {\n        console.warn(`未知数字字符: ${char}`, result);\n      }\n    }\n    total += temp; // 添加剩余值\n\n    // ==== 7.3 零值特殊处理 ====\n    /*\n     * 功能：将'第零章'转换为'序章'\n     * 触发条件：\n     * 1. 转换结果为0\n     * 2. config.convertZeroToPreface为true\n     * \n     * 处理方式：\n     * - 清空数字部分\n     * - 在标识符前加'序'\n     * \n     * 示例：\n     * 输入 → 输出\n     * '第零章' → '序章' (开启时)\n     * '第零章' → '第0章' (关闭时)\n     */\n    if (total === 0 && config.convertZeroToPreface) {\n      total = ''; // 清空数字显示\n      suffix = '序' + suffix; // 添加序前缀\n    }\n\n    // ==== 7.4 智能空格处理 ====\n    /*\n     * 功能：智能处理章节号和内容间的空格\n     * 处理规则：\n     * 1. 检测原标题是否有空格（含全角空格）\n     * 2. 无空格且autoAddSpace为true时添加空格\n     * \n     * 示例：\n     * 输入 → 输出\n     * '第X章内容' → '第X章 内容' (autoAddSpace=true)\n     * '第X章 内容' → 保持不变\n     * '第X章　内容' → 保持不变（全角空格）\n     */\n    let hasSpace = config.autoAddSpace \n      ? getSpaceRegex(titleMatch[2]).test(result)\n      : true; // 不自动添加时空格视为已有\n\n    // ==== 7.5 最终结果组装 ====\n    /*\n     * 组装规则：\n     * 1. 有内容时：'第X章 内容'\n     * 2. 无内容时：'第X章'\n     * \n     * 特殊处理：\n     * - 内容以中文标点开头时不添加空格\n     * - 零值转换后的特殊格式\n     * \n     * 示例：\n     * 输入 → 输出\n     * ['123', '章', '内容'] → '第123章 内容'\n     * ['123', '章', ''] → '第123章'\n     * ['', '序章', '内容'] → '序章 内容'\n     */\n    if (titlePart) {\n      const shouldAddSpace = !hasSpace && !regexCache.chinesePunctuation.test(titlePart);\n      result = `第${total}${suffix}${shouldAddSpace ? ' ' : ''}${titlePart}`;\n    } else {\n      result = `第${total}${suffix}`;\n    }\n  }\n}\n// 非章节标题返回处理后的字符串（保留标点处理结果）\nelse result",
    "scope": "",
    "scopeContent": false,
    "scopeTitle": true,
    "timeoutMillisecond": 3000
  }
]
