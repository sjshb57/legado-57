[
  {
    "excludeScope": "",
    "group": "格式",
    "id": 1,
    "isEnabled": true,
    "isRegex": true,
    "name": "#01 数字标题#JS",
    "order": 1,
    "pattern": "^第[零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬貳參陸]{1,9}[章节回集卷部篇话讲段]?(.*)",
    "replacement": "@js:(function() {\n  /*==== 版本更新日志 ====*/\n  /*\n   * 作者：sjshb\n   * GitHub：https://github.com/sjshb57/legado-57\n   * \n   * [v2.4.0] 第十九次修改 - 无标识符标题支持\n   * - 增加对'第一百九十八标题'格式的支持\n   * - 更新正则表达式匹配模式\n   * - 扩展章节标识符检测逻辑\n   * - 更新所有文档和示例\n   * \n   * [v2.4.1] 第二十次修改 - 移除非必要功能\n   * - 移除统计代码\n   * - 简化缓存系统\n   * - 删除严格模式\n   * \n   * [v2.4.2] 第二十一次修改 - 文档与示例增强\n   * - 为所有代码块添加详细注释\n   * - 重新举例典型示例\n   * - 优化配置系统文档\n   * - 完善正则表达式说明\n   *\n   * [v2.5.0] 第二十二次修改 - 模块化重构版本\n   * - 采用模块化架构重构代码\n   * - 添加完整文档注释系统\n   * - 优化正则缓存性能\n   * - 增强配置灵活性\n   */\n\n  // ==== 1. 功能文档 ====\n  /* \n   * 功能概述：\n   * 本脚本是一个高级中文数字标题转换工具，专门用于处理各种格式的中文数字标题，将其转换为统一的阿拉伯数字格式，同时提供多种智能处理选项。\n   * 重构模块化设计提高代码可维护性和扩展性。\n   * \n   * 主要功能亮点：\n   * 1. 全面支持简繁体中文数字转换（零-萬）\n   * 2. 智能空格处理，自动检测并修正空格问题\n   * 3. 标点符号规范化（适用于所有标题类型）\n   * 4. 特殊章节处理（如将'第零章'转为'序章'）\n   * 5. 完整支持繁体中文数字（壹貳參等）\n   * 6. 灵活的配置系统（支持动态修改配置）\n   * 7. 完善的文档和注释系统（包含详细的使用说明）\n   * 8. 支持无标识符标题格式（例如第一百标题）\n   * 9. 兼容性广泛（支持多种章节标识符）\n   * \n   * 典型输入输出示例（五大类）：\n   * 输入 → 输出\n   * ----------------------------------------\n   *基础转换示例\n   * '第一章 内容' → '第1章 内容'\n   * '第壹佰贰拾叁节' → '第123节'\n   * '第两章测试' → '第2章 测试'\n   *复杂数字示例\n   * '第伍萬陆仟柒佰捌拾玖篇' → '第56789篇'\n   * '第壹萬零伍佰章' → '第10500章'\n   * '第參佰陸拾伍章' → '第365章'\n   *零值处理示例\n   * '第零回 序言' → '序回 序言' (开启零值转换时)\n   * '第零卷' → '序卷' (开启零值转换时)\n   * '第〇章 空白' → '第0章 空白' (未开启零值转换时)\n   *无标识符标题示例\n   * '第一百标题' → '第100章 标题'\n   * '第三百六十五测试' → '第365章 测试'\n   * '第五百零二' → '第502章'\n   *标点与空格示例\n   * '内容。' → '内容' (全局标点移除)\n   * '第1章内容' → '第1章 内容' (自动补空格)\n   * '第1章：简介' → '第1章：简介' (中文标点前不补空格)\n   */\n\n  // ==== 2. 配置系统 ====\n  /*\n   * 配置说明：\n   * 所有功能行为都可通过Config对象进行精细控制，支持动态修改配置。\n   * \n   * 完整配置选项说明：\n   * removePunctuation - 控制是否移除标题末尾标点（现在适用于所有标题类型）\n   *   true: 自动移除标题末尾的。！？.等标点（默认）\n   *   false: 保留所有标点符号\n   *   影响范围：所有标题（包括非章节标题）\n   *   示例：'内容。' → '内容' (true时)\n   * \n   * autoAddSpace - 控制是否自动添加空格\n   *   true: 在章节号和内容间智能添加空格（默认）\n   *   false: 保持原始空格状态\n   *   示例：'第1章内容' → '第1章 内容' (true时)\n   * \n   * convertZeroToPreface - 零值特殊处理\n   *   true: 将'第零章'转换为'序章'\n   *   false: 保持'第0章'格式（默认）\n   *   示例：'第零回' → '序回' (true时)\n   * \n   * maxCacheSize - 最大缓存条目数\n   *   数值: 限制每种缓存的最大条目数（默认100）\n   *   示例：防止内存无限增长\n   * \n   * defaultSuffix - 无标识符时的默认后缀\n   *   字符串: 当标题无章节标识符时使用的默认后缀\n   *   默认值: '章'\n   *   示例: '第一百标题' → '第100章 标题'\n   * \n   * 配置示例：\n   * // 保留所有标点并不自动添加空格\n   * Config.update({\n   *   removePunctuation: false,\n   *   autoAddSpace: false\n   * });\n   * // 结果示例：'第1章内容。' → '第1章内容。'\n   * \n   * // 启用零值转换\n   * Config.update({ convertZeroToPreface: true });\n   * // 结果示例：'第零章' → '序章'\n   * \n   * // 自定义配置组合1\n   * Config.update({\n   *   removePunctuation: true,\n   *   autoAddSpace: false\n   * });\n   * // 结果示例：'第1章内容！' → '第1章内容'\n   * \n   * // 自定义配置组合2\n   * Config.update({\n   *   removePunctuation: false,\n   *   autoAddSpace: true\n   * });\n   * // 结果示例：'第1章内容。' → '第1章 内容。'\n   * \n   * // 自定义默认后缀\n   * Config.update({ defaultSuffix: '节' });\n   * // 结果示例：'第一百标题' → '第100节 标题'\n   * \n   * // 复杂配置示例1\n   * Config.update({\n   *   removePunctuation: true,\n   *   autoAddSpace: true,\n   *   convertZeroToPreface: true,\n   *   defaultSuffix: '回'\n   * });\n   * // 结果示例：'第零回内容！' → '序回 内容'\n   * \n   * // 复杂配置示例2\n   * Config.update({\n   *   removePunctuation: false,\n   *   autoAddSpace: false,\n   *   convertZeroToPreface: false,\n   *   defaultSuffix: '篇'\n   * });\n   * // 结果示例：'第壹佰贰拾叁内容。' → '第123篇内容。'\n   */\n  const Config = {\n    removePunctuation: true,    // 是否移除末尾标点\n    autoAddSpace: true,         // 是否自动添加空格\n    convertZeroToPreface: false, // 是否将零转换为序\n    maxCacheSize: 100,          // 最大缓存条目数\n    defaultSuffix: '章',        // 无标识符时的默认后缀\n    \n    /*\n     * 方法：update\n     * 功能：动态更新配置参数\n     * 参数：newConfig - 包含新配置项的对象\n     * 返回：无\n     * \n     * 使用示例：\n     * Config.update({ autoAddSpace: false });\n     * \n     * 注意事项：\n     * - 只会更新提供的配置项，未提供的保持原值\n     * - 修改立即生效，无需重启\n     */\n    update: function(newConfig) {\n      Object.assign(this, newConfig);\n    }\n  };\n  \n  // ==== 3. 正则表达式系统 ====\n  /*\n   * Regex 对象说明：\n   * 封装所有正则表达式相关操作，包含预编译模式和智能缓存系统。\n   * \n   * 包含组件：\n   * 1. cache - 动态生成的正则表达式缓存\n   * 2. patterns - 预编译的常用正则表达式\n   * 3. getSpaceRegex - 获取空格检测正则的方法\n   * \n   * 预编译的正则表达式列表：\n   * 1. punctuation - 标点符号检测（匹配。！？.等结尾标点）\n   *   模式：/[。！？.]+$/\n   *   用途：移除章节标题末尾标点\n   *   示例：\n   *     '内容。' → 匹配'。'\n   *     '标题！' → 匹配'！'\n   * \n   * 2. chinesePunctuation - 中文标点检测（匹配：、，；等）\n   *   模式：/^[：、，；？！（）「」【】]/\n   *   用途：防止在中文标点前添加空格\n   *   示例：\n   *     '：内容' → 匹配'：'\n   *     '，测试' → 匹配'，'\n   * \n   * 3. chapter - 主匹配模式（识别中文数字标题）\n   *   模式：/^第([零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬貳參陸]+)([章节回集卷部篇话讲段]?)(.*)/\n   *   修改说明：章节标识符变为可选\n   *   分组：\n   *     第1组：中文数字部分\n   *     第2组：章节标识符（可能为空）\n   *     第3组：标题内容\n   *   示例：\n   *     '第壹佰贰拾叁节' → ['壹佰贰拾叁', '节', '']\n   *     '第一百标题' → ['一百', '', '标题']\n   * \n   * 4. titlePunctuation - 全局标点处理（匹配所有标题结尾标点）\n   *   增强模式：/[。！？.，：；]+$/\n   *   修改说明：现在能正确处理更多标点类型\n   *   示例：\n   *     '内容。' → 匹配'。'\n   *     '标题！' → 匹配'！'\n   *     '结尾；' → 匹配'；'\n   */\n  const Regex = {\n    // 正则表达式缓存\n    cache: {},\n    \n    // 预编译的正则表达式模式\n    patterns: {\n      // 标点符号检测正则（预编译）\n      // 功能：匹配标题末尾的标点符号\n      // 示例：'内容！' → 匹配'！'\n      punctuation: /[。！？.]+$/,\n      \n      // 中文标点检测正则（预编译）\n      // 功能：识别中文标点符号\n      // 示例：'：内容' → 匹配'：'\n      chinesePunctuation: /^[：、，；？！（）「」【】]/,\n      \n      // 主匹配正则（预编译）\n      // 功能：提取中文数字标题的各个部分\n      // 示例：'第貳佰章 内容' → ['貳佰', '章', ' 内容']\n      chapter: /^第([零〇一二三四五六七八九十百千两万壹贰叁肆伍陆柒捌玖拾佰仟萬貳參陸]+)([章节回集卷部篇话讲段]?)(.*)/,\n      \n      // 所有标题标点检测（增强）\n      // 功能：全局处理所有标题的末尾标点（包括非章节标题）\n      // 示例：'请假条。' → 匹配'。'\n      titlePunctuation: /[。！？.，：；]+$/\n    },\n    \n    /*\n     * 方法：getSpaceRegex\n     * 功能：获取或创建空格检测正则表达式（带缓存）\n     * 参数：suffix - 章节标识符（如'章'/'节'）\n     * 返回：预编译的正则对象\n     * \n     * 算法说明：\n     * 1. 检查缓存中是否已存在该标识符的正则\n     *    - 是 → 返回缓存结果\n     *    - 否 → 继续步骤2\n     * 2. 检查缓存是否已达上限\n     *    - 是 → 随机移除一个条目\n     * 3. 创建新正则表达式\n     *    - 模式：/[\\\\s　]*${suffix}[\\\\s　]+/\n     * 4. 将新正则存入缓存\n     * 5. 返回新正则\n     * \n     * 使用示例：\n     * getSpaceRegex('章') → /[\\s　]*章[\\s　]+/\n     * getSpaceRegex('回') → /[\\s　]*回[\\s　]+/\n     * \n     * 性能说明：\n     * - 每种标识符只需编译一次\n     * - 后续调用直接返回缓存\n     * - 缓存大小受Config.maxCacheSize限制\n     * - 采用随机替换策略管理缓存\n     */\n    getSpaceRegex: function(suffix) {\n      // 检查缓存中是否已有该标识符的正则\n      if (this.cache[suffix]) {\n        return this.cache[suffix];\n      }\n      \n      // 检查缓存大小，如果超过限制则随机移除一个条目\n      const keys = Object.keys(this.cache);\n      if (keys.length >= Config.maxCacheSize) {\n        delete this.cache[keys[Math.floor(Math.random() * keys.length)]];\n      }\n      \n      // 创建新的空格检测正则表达式\n      // 匹配模式：零个或多个空格（含全角空格）+标识符+一个或多个空格\n      this.cache[suffix] = new RegExp(`[\\\\s　]*${suffix}[\\\\s　]+`);\n      \n      return this.cache[suffix];\n    }\n  };\n  \n  // ==== 4. 数字转换系统 ====\n  /*\n   * NumberConverter 对象说明：\n   * 独立的中文数字转换器，封装所有数字相关逻辑。\n   * \n   * 包含组件：\n   * 1. map - 中文数字到阿拉伯数字的映射表\n   * 2. convert - 核心转换方法\n   * \n   * 中文数字映射表：\n   * 提供从中文数字到阿拉伯数字的完整映射关系。\n   * 支持简繁体、大写小写、各种单位数字。\n   * \n   * 数字处理规则：\n   * 1. 基础数字：零(0)到九(9)\n   *    - 包含'〇'作为零的变体\n   *    - '两'作为'二'的同义词\n   * 2. 单位数字：十(10)、百(100)、千(1000)、万(10000)\n   *    - 包含大写单位：拾/佰/仟/萬\n   * 3. 大写数字：壹(1)、贰(2)等财务用数字\n   * 4. 繁体数字：貳(2)、參(3)、陸(6)等\n   */\n  const NumberConverter = {\n    // 中文数字映射表\n    map: {\n      // 小写数字\n      '零':0, '〇':0, // 零的两种写法\n      '一':1, '二':2, '两':2, // '两'作为'二'的替代\n      '三':3, '四':4, '五':5, '六':6, '七':7, '八':8, '九':9,\n      \n      // 单位数字\n      '十':10, '百':100, '千':1000, '万':10000,\n      \n      // 大写数字（财务用）\n      '壹':1, '贰':2, '叁':3, '肆':4, '伍':5, \n      '陆':6, '柒':7, '捌':8, '玖':9,\n      '拾':10, '佰':100, '仟':1000, '萬':10000,\n      \n      // 繁体数字\n      '貳':2, '參':3, '陸':6\n    },\n    \n    /*\n     * 方法：convert\n     * 功能：将中文数字转换为阿拉伯数字\n     * 参数：chineseNum - 中文字符串\n     * 返回：Number 转换结果\n     * \n     * 转换算法：\n     * 1. 遍历每个中文字符\n     * 2. 识别数字字符和单位字符\n     * 3. 按照中文数字规则累计计算\n     *    - 单位数字：乘算并累加\n     *    - 普通数字：累加到临时值\n     * \n     * 示例：\n     * '貳佰參拾'处理流程：\n     * 1. 貳(2)→temp=2\n     * 2. 佰(100)→temp=2*100=200→total=200→temp=0\n     * 3. 參(3)→temp=3\n     * 4. 拾(10)→temp=3*10=30→total=230→temp=0\n     * 最终结果：230\n     * \n     * '壹萬伍仟陆佰柒拾捌'处理流程：\n     * 1. 壹(1)→temp=1\n     * 2. 萬(10000)→temp=1*10000=10000→total=10000→temp=0\n     * 3. 伍(5)→temp=5\n     * 4. 仟(1000)→temp=5*1000=5000→total=15000→temp=0\n     * 5. 陆(6)→temp=6\n     * 6. 佰(100)→temp=6*100=600→total=15600→temp=0\n     * 7. 柒(7)→temp=7\n     * 8. 拾(10)→temp=7*10=70→total=15670→temp=0\n     * 9. 捌(8)→temp=8→total=15678\n     * 最终结果：15678\n     */\n    convert: function(chineseNum) {\n      let total = 0;  // 累计结果\n      let temp = 0;   // 当前临时值\n      \n      // 遍历每个中文字符\n      for (let i = 0; i < chineseNum.length; i++) {\n        let char = chineseNum[i];\n        let val = this.map[char];\n        \n        // 单位数字处理（十/百/千/万）\n        if ([10, 100, 1000, 10000].includes(val)) {\n          // 处理如'十'的情况（前面无数时视为一十）\n          temp = (temp === 0 ? 1 : temp) * val;\n          total += temp;\n          temp = 0; // 单位后必须重置\n        }\n        // 普通数字处理（一-九）\n        else if (val !== undefined) {\n          temp += val;\n        }\n      }\n      \n      // 添加剩余值\n      return total + temp;\n    }\n  };\n  \n  // ==== 5. 主处理函数 ====\n  /*\n   * 函数：processTitle\n   * 功能：处理标题转换的主逻辑\n   * 参数：title - 原始标题\n   * 返回：处理后的标题\n   * \n   * 处理流程：\n   * 1. 检查是否为章节标题（以''第''开头）\n   * 2. 移除标点（如配置）\n   * 3. 提取中文数字部分\n   * 4. 转换数字\n   * 5. 处理零值特殊情况\n   * 6. 智能处理空格\n   * 7. 组装最终结果\n   * \n   * 处理流程图：\n   * 开始 → 检查是否以''第''开头 → 否 → 返回原内容\n   *           ↓ 是\n   *       移除末尾标点（如配置）\n   *           ↓\n   *       正则匹配标题各部分 → 失败 → 返回原内容\n   *           ↓ 成功\n   *       提取中文数字 → 数字转换 → 零值处理\n   *           ↓\n   *       提取内容部分 → 空格处理\n   *           ↓\n   *       组装最终结果 → 返回\n   */\n  function processTitle(title) {\n    /*\n     * 步骤1：检查是否为章节标题\n     * 判断逻辑：检查是否以''第''开头\n     * 示例：\n     * '第一章' → true\n     * '内容' → false\n     */\n    if (!title.startsWith(\"第\")) return title;\n    \n    /*\n     * 步骤2：全局标点处理\n     * 功能：处理所有标题的末尾标点符号\n     * 处理规则：\n     * 1. 仅当Config.removePunctuation为true时执行\n     * 2. 处理所有标题（无论是否为章节标题）\n     * 3. 只移除字符串末尾的标点\n     * \n     * 典型示例：\n     * 输入 → 输出 (removePunctuation=true)\n     * '内容。' → '内容'\n     * '请假条。' → '请假条'\n     * '第一章 内容！' → '第一章 内容'\n     */\n    if (Config.removePunctuation) {\n      title = title.replace(Regex.patterns.titlePunctuation, '');\n    }\n    \n    /*\n     * 步骤3：正则匹配标题各部分\n     * 功能：使用预编译的正则提取中文数字标题各部分\n     * 匹配组：\n     * 1. 中文数字部分\n     * 2. 章节标识符（可能为空）\n     * 3. 标题内容\n     * \n     * 示例：\n     * '第壹佰贰拾叁节' → ['壹佰贰拾叁', '节', '']\n     * '第一百标题' → ['一百', '', '标题']\n     */\n    const match = title.match(Regex.patterns.chapter);\n    if (!match) return title;\n    \n    // 提取匹配组\n    const [, chineseNum, originalSuffix, titlePart] = match;\n    \n    /*\n     * 步骤4：处理章节标识符\n     * 规则：\n     * 1. 使用原始标识符（如存在）\n     * 2. 无标识符时使用默认后缀\n     * \n     * 示例：\n     * '第一章' → '章'\n     * '第一百标题' → '章' (使用defaultSuffix)\n     */\n    const suffix = originalSuffix || Config.defaultSuffix;\n    \n    /*\n     * 步骤5：处理标题内容部分\n     * 功能：\n     * 1. 提取标题正文（第3组）\n     * 2. 去除首尾空白\n     * 3. 保留中间格式\n     * \n     * 示例：\n     * '第一章 内容' → '内容'\n     * '第壹佰章  多空格  ' → '多空格'\n     */\n    const cleanTitlePart = (titlePart || '').trim();\n    \n    /*\n     * 步骤6：中文数字转换\n     * 功能：调用NumberConverter转换中文数字\n     * 注意：\n     * - 支持复杂中文数字组合\n     * - 处理简繁体和大写数字\n     * \n     * 示例：\n     * '二百三十' → 230\n     * '壹萬贰仟叁佰肆拾伍' → 12345\n     */\n    let number = NumberConverter.convert(chineseNum);\n    \n    /*\n     * 步骤7：零值特殊处理\n     * 功能：将'第零章'转换为'序章'\n     * 触发条件：\n     * 1. 转换结果为0\n     * 2. Config.convertZeroToPreface为true\n     * \n     * 示例：\n     * 输入 → 输出 (convertZeroToPreface=true)\n     * '第零章' → '序章'\n     * '第零回' → '序回'\n     */\n    if (number === 0 && Config.convertZeroToPreface) {\n      number = ''; // 清空数字显示\n      suffix = '序' + suffix; // 添加序前缀\n    }\n    \n    /*\n     * 步骤8：智能空格处理\n     * 功能：检测原标题是否有空格（含全角空格）\n     * 处理规则：\n     * 1. 检测原标题是否有空格\n     * 2. 无空格且autoAddSpace为true时添加空格\n     * 3. 内容以中文标点开头时不添加空格\n     * \n     * 示例：\n     * 输入 → 输出 (autoAddSpace=true)\n     * '第1章内容' → '第1章 内容'\n     * '第1章 内容' → '第1章 内容' (保留原空格)\n     * '第1章：内容' → '第1章：内容' (不添加空格)\n     */\n    let hasSpace = Config.autoAddSpace \n      ? Regex.getSpaceRegex(originalSuffix || Config.defaultSuffix).test(title)\n      : true; // 不自动添加时空格视为已有\n    \n    /*\n     * 步骤9：最终结果组装\n     * 组装规则：\n     * 1. 有内容时：'第X章 内容'\n     * 2. 无内容时：'第X章'\n     * \n     * 特殊处理：\n     * - 内容以中文标点开头时不添加空格\n     * - 零值转换后的特殊格式\n     * \n     * 示例：\n     * 输入 → 输出\n     * '第壹佰章内容' → '第100章 内容'\n     * '第零章 序言' → '序章 序言' (convertZeroToPreface=true)\n     */\n    if (cleanTitlePart) {\n      // 检查是否需要添加空格\n      // 条件：1. 原无空格 2. 配置要求添加 3. 内容不以中文标点开头\n      const shouldAddSpace = !hasSpace && !Regex.patterns.chinesePunctuation.test(cleanTitlePart);\n      return `第${number}${suffix}${shouldAddSpace ? ' ' : ''}${cleanTitlePart}`;\n    }\n    \n    return `第${number}${suffix}`;\n  }\n  \n  // 执行处理并返回结果\n  return processTitle(result);\n})();",
    "scope": "",
    "scopeContent": false,
    "scopeTitle": true,
    "timeoutMillisecond": 3000
  }
]
